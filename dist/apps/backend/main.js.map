{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.controller.ts","webpack:///./src/app/app.service.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/users/users.service.ts","webpack:///./src/app/prisma.service.ts","webpack:///external commonjs \"@prisma/client\"","webpack:///external commonjs \"bcrypt\"","webpack:///../../libs/utils/src/index.ts","webpack:///../../libs/utils/src/lib/utils.ts","webpack:///../../libs/utils/src/lib/validations/validateEmail.ts","webpack:///../../libs/utils/src/lib/backendCalls/apiClient.ts","webpack:///../../libs/utils/src/lib/shared-types/index.ts","webpack:///../../libs/utils/src/lib/shared-types/user.ts","webpack:///../../libs/utils/src/lib/shared-types/express.ts","webpack:///../../libs/utils/src/lib/shared-types/client.ts","webpack:///external commonjs \"@nestjs/jwt\"","webpack:///./src/app/auth/auth.controller.ts","webpack:///external commonjs \"express\"","webpack:///./src/app/users/dto/create-user.dto.ts","webpack:///./src/app/auth/auth.guard.ts","webpack:///./src/app/users/users.module.ts","webpack:///external commonjs \"@nestjs/passport\"","webpack:///./src/app/auth/jwt.strategy.ts","webpack:///external commonjs \"passport-jwt\"","webpack:///./src/app/prisma.mdule.ts","webpack:///./src/app/company/company.module.ts","webpack:///./src/app/company/company.service.ts","webpack:///./src/app/company/company.controller.ts","webpack:///./src/app/company/dto/create-company.dto.ts","webpack:///./src/app/clients/client.module.ts","webpack:///./src/app/clients/client.controller.ts","webpack:///./src/app/clients/createClient.service.ts","webpack:///./src/app/clients/dto/create-client.dto.ts","webpack:///./src/app/clients/getClients.service.ts","webpack:///external commonjs \"cookie-parser\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common'\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\nimport { AuthModule } from './auth/auth.module'\nimport { PrismaModule } from './prisma.mdule'\nimport { CompanyModule } from './company/company.module'\nimport { ClientModule } from './clients/client.module'\n\n@Module({\n  imports: [AuthModule, PrismaModule, CompanyModule, ClientModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  async getData(): Promise<{ id: number; email: string }> {\n    const blla = {\n      id: 1,\n      email: 'test',\n    };\n    return blla;\n  }\n}\n","import { Module } from '@nestjs/common'\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { UsersModule } from '../users/users.module'\nimport { PassportModule } from '@nestjs/passport'\nimport { JwtModule } from '@nestjs/jwt'\nimport { JwtStrategy } from './jwt.strategy'\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET_KEY,\n      signOptions: { expiresIn: '7D' }, //7 days\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n","import { Injectable } from '@nestjs/common'\nimport { Response as ExpressResponse } from 'express'\nimport { UsersService } from '../users/users.service'\nimport { JwtService } from '@nestjs/jwt'\nimport { Login, type AuthenticatedRequest } from '@dental-pro/utils'\nimport * as bcrypt from 'bcrypt'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n  ) {}\n  async signIn(\n    email: string,\n    pass: string,\n    res: ExpressResponse\n  ): Promise<ExpressResponse<Login>> {\n    const user = await this.usersService.findOne(email)\n    if (!user || !(await bcrypt.compare(pass, user.password))) {\n      return res\n        .status(401)\n        .json({ message: 'Invalid credentials', success: false })\n    }\n\n    const payload = {\n      email: user.email,\n      id: user.id,\n      company_id: user.company_id,\n    }\n    const token = this.jwtService.sign(payload)\n\n    res.cookie('access_token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    })\n\n    return res.json({\n      message: 'Logged in successfully',\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        Company: {\n          name: user.Company.name,\n          id: user.Company.id,\n        },\n      },\n    })\n  }\n\n  //TODO with cookies\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async register(createUserDto: CreateUserDto): Promise<any> {\n    const user = await this.usersService.createUser(createUserDto)\n    const payload = { email: user.email, sub: user.id }\n    return {\n      access_token: this.jwtService.sign(payload),\n    }\n  }\n\n  async me(\n    req: AuthenticatedRequest,\n    res: ExpressResponse\n  ): Promise<ExpressResponse<Login>> {\n    const user = await this.usersService.findOne(req.user.email)\n\n    return res.json({\n      message: 'User found',\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        Company: {\n          name: user.Company.name,\n          id: user.Company.id,\n        },\n      },\n    })\n  }\n}\n","import { Injectable } from '@nestjs/common'\nimport { PrismaService } from '../prisma.service'\nimport * as bcrypt from 'bcrypt'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { validateEmail } from '@dental-pro/utils'\nimport { Prisma } from '@prisma/client'\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n\n  async createUser(\n    createUserDto: CreateUserDto\n  ): Promise<Prisma.UserGetPayload<{ select: { id: true; email: true } }>> {\n    const { email, password, firstName, lastName, companyId } = createUserDto\n\n    if (!validateEmail(email)) {\n      throw new Error('Invalid email')\n    }\n    const hashPassword = (password: string) => {\n      const saltRounds = 10\n      return bcrypt.hash(password, saltRounds)\n    }\n    const hashedPassword = await hashPassword(password)\n\n    return this.prisma.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        company_id: companyId,\n      },\n      select: {\n        id: true,\n        email: true,\n      },\n    })\n  }\n\n  async findOne(\n    email: string\n  ): Promise<Prisma.UserGetPayload<{ include: { Company: true } }> | null> {\n    return this.prisma.user.findFirst({\n      where: {\n        email,\n      },\n      include: {\n        Company: true,\n      },\n    })\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    return password\n  }\n}\n","import {\n  Injectable,\n  type OnModuleInit,\n  type OnModuleDestroy,\n  Global,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Global()\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n","module.exports = require(\"@prisma/client\");","module.exports = require(\"bcrypt\");","export * from './lib/utils'\nexport * from './lib//validations/validateEmail'\nexport * from './lib/backendCalls/apiClient'\nexport * from './lib/shared-types'\n","export function utils(): string {\n  return 'utils';\n}\n","export function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n","export const apiClient = async <T>(\n  endpoint: string,\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE',\n  body?: object,\n  headers?: HeadersInit\n): Promise<\n  | T\n  | {\n      error: boolean\n      status: number\n      message: string\n    }\n> => {\n  const res = await fetch(`${process.env['NEXT_PUBLIC_API_URL']}${endpoint}`, {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    credentials: 'include',\n    body: body ? JSON.stringify(body) : undefined,\n  })\n\n  if (!res.ok) {\n    return {\n      error: true,\n      status: res.status,\n      message: res.statusText,\n    }\n  }\n\n  return res.json()\n}\n","export * from './user'\nexport * from './express'\nexport * from './client'\n","export interface LoginUser {\n  id: number\n  email: string\n  firstName: string\n  lastName: string\n  Company: {\n    id: number\n    name: string\n  }\n}\n\nexport interface Login {\n  message: string\n  success: boolean\n  user: LoginUser\n}\n\nexport interface JwtUser {\n  email: string\n  id: number\n  iat: number\n  company_id: number\n  exp: number\n}\n","import type { Request } from 'express'\nimport type { JwtUser } from './index'\n\nexport interface AuthenticatedRequest extends Request {\n  user: JwtUser\n}\n","export interface CreatedClient {\n  id: number\n  firstName: string\n  lastName: string\n}\n","module.exports = require(\"@nestjs/jwt\");","import {\n  Body,\n  Controller,\n  Post,\n  HttpCode,\n  HttpStatus,\n  Res,\n  Get,\n  UseGuards,\n  Request,\n} from '@nestjs/common'\nimport { Response as ExpressResponse } from 'express'\nimport { AuthService } from './auth.service'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthGuard } from './auth.guard'\nimport { AuthenticatedRequest } from '@dental-pro/utils'\n\n@Controller()\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(\n    @Body() signInDto: { email: string; password: string },\n    @Res() res: ExpressResponse\n  ) {\n    return this.authService.signIn(signInDto.email, signInDto.password, res)\n  }\n\n  @Post('register')\n  async register(@Body() body: CreateUserDto) {\n    return this.authService.register(body)\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('me')\n  async me(@Request() req: AuthenticatedRequest, @Res() res: ExpressResponse) {\n    return this.authService.me(req, res)\n  }\n}\n","module.exports = require(\"express\");","export class CreateUserDto {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  companyId: number;\n}\n","import { JwtUser } from '@dental-pro/utils'\nimport {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport { Request } from 'express'\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest<Request>()\n    const token = this.extractTokenFromCookies(request)\n\n    if (!token) {\n      throw new UnauthorizedException()\n    }\n    try {\n      const payload: JwtUser = await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET_KEY,\n      })\n\n      request['user'] = payload\n    } catch {\n      throw new UnauthorizedException()\n    }\n    return true\n  }\n\n  private extractTokenFromCookies(request: Request): string | undefined {\n    // Ensure you have cookie-parser middleware installed and configured\n    return request.cookies?.access_token\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n","module.exports = require(\"@nestjs/passport\");","import { Injectable } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport type { Request } from 'express'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => request?.cookies?.access_token,\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET_KEY,\n    })\n  }\n\n  async validate(payload: { sub: string; email: string }) {\n    return { userId: payload.sub, email: payload.email }\n  }\n}\n","module.exports = require(\"passport-jwt\");","import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n","import { Module } from '@nestjs/common';\nimport { CompanyService } from './company.service';\nimport { CompanyController } from './company.controller';\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtService } from '@nestjs/jwt';\n\n@Module({\n  imports: [AuthModule],\n  controllers: [CompanyController],\n  providers: [CompanyService, JwtService],\n})\nexport class CompanyModule {}\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport type { CreateCompanyDto } from './dto/create-company.dto.ts';\nimport { PrismaService } from '../prisma.service';\nimport { AuthService } from '../auth/auth.service';\n\n@Injectable()\nexport class CompanyService {\n  constructor(private prisma: PrismaService, private authUser: AuthService) {}\n\n  async create(createCompanyDto: CreateCompanyDto) {\n    const company = await this.prisma.company.create({\n      data: {\n        name: createCompanyDto.name,\n      },\n    });\n    const user = await this.authUser.register({\n      email: createCompanyDto.email,\n      password: createCompanyDto.password,\n      firstName: createCompanyDto.firstName,\n      lastName: createCompanyDto.lastName,\n      companyId: company.id,\n    });\n    return { ...company, user };\n  }\n\n  async findFirstCompany(id: number) {\n    const company = await this.prisma.company.findUnique({ where: { id } });\n    if (!company) {\n      throw new NotFoundException(`Company not found`);\n    }\n    return company;\n  }\n}\n","import { Controller, Get, Post, Body, UseGuards } from '@nestjs/common'\nimport { CompanyService } from './company.service'\nimport { CreateCompanyDto } from './dto/create-company.dto'\nimport { AuthGuard } from '../auth/auth.guard'\n// import { UpdateCompanyDto } from './dto/update-company.dto';\n\n@Controller('company')\nexport class CompanyController {\n  constructor(private readonly companyService: CompanyService) {}\n\n  @Post()\n  create(@Body() createCompanyDto: CreateCompanyDto) {\n    return this.companyService.create(createCompanyDto)\n  }\n\n  // @Get()\n  // findAll() {\n  //   return this.companyService.findAll();\n  // }\n\n  @UseGuards(AuthGuard)\n  @Get()\n  findOne(@Body() input: { id: number }) {\n    return this.companyService.findFirstCompany(input.id)\n  }\n\n  // @Put(':id')\n  // update(@Param('id') id: string, @Body() updateCompanyDto: UpdateCompanyDto) {\n  //   return this.companyService.update(id, updateCompanyDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.companyService.remove(id);\n  // }\n}\n","import { CreateUserDto } from '../../users/dto/create-user.dto';\n\nexport class CreateCompanyDto extends CreateUserDto {\n  readonly name: string;\n}\n","import { Module } from '@nestjs/common'\nimport { ClientController } from './client.controller'\nimport { AuthModule } from '../auth/auth.module'\nimport { CreateClientService } from './createClient.service'\nimport { JwtService } from '@nestjs/jwt'\nimport { GetClientsService } from './getClients.service'\n\n@Module({\n  imports: [AuthModule],\n  controllers: [ClientController],\n  providers: [CreateClientService, GetClientsService, JwtService],\n})\nexport class ClientModule {}\n","import { Body, Controller, Get, Post, Request, UseGuards } from '@nestjs/common'\nimport { CreateClientService } from './createClient.service'\nimport { CreateClientDtoInput } from './dto/create-client.dto'\nimport { AuthenticatedRequest } from '@dental-pro/utils'\nimport { AuthGuard } from '../auth/auth.guard'\nimport { GetClientsService } from './getClients.service'\n\n@Controller('clients')\nexport class ClientController {\n  constructor(\n    private readonly createClientService: CreateClientService,\n    private readonly getClientsService: GetClientsService\n  ) {}\n\n  @UseGuards(AuthGuard)\n  @Post()\n  async create(\n    @Request() req: AuthenticatedRequest,\n    @Body() createClientDto: CreateClientDtoInput\n  ) {\n    return this.createClientService.createClient(req, createClientDto)\n  }\n\n  @UseGuards(AuthGuard)\n  @Get()\n  async getClients(@Request() req: AuthenticatedRequest) {\n    return this.getClientsService.getClients(req)\n  }\n}\n","import { Injectable } from '@nestjs/common'\nimport { PrismaService } from '../prisma.service'\nimport { CreateClientDtoInput } from './dto/create-client.dto'\nimport { Prisma } from '@prisma/client'\nimport { AuthenticatedRequest } from '@dental-pro/utils'\n\n@Injectable()\nexport class CreateClientService {\n  constructor(private prisma: PrismaService) {}\n\n  async createClient(\n    req: AuthenticatedRequest,\n    createClientDto: CreateClientDtoInput\n  ): Promise<\n    Prisma.ClientGetPayload<{\n      select: {\n        id: true\n        firstName: true\n        lastName: true\n      }\n    }>\n  > {\n    const {\n      email,\n      firstName,\n      lastName,\n      address,\n      allergies,\n      bloodGroup,\n      city,\n      country,\n      dob,\n      gender,\n      phone,\n      postalCode,\n    } = createClientDto\n\n    const createdClient = await this.prisma.client.create({\n      data: {\n        email,\n        firstName,\n        lastName,\n        address,\n        allergies,\n        bloodGroup,\n        city,\n        country,\n        dob,\n        gender,\n        phone,\n        postalCode,\n        company_id: req.user.company_id,\n        created_by: req.user.id,\n      },\n      select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n      },\n    })\n    return createdClient\n  }\n}\n","export interface CreateClientDtoInput {\n  firstName: string\n  lastName: string\n  email?: string\n  phone?: string\n  dob?: Date\n  gender?: string\n  city?: string\n  country?: string\n  address?: string\n  postalCode?: string\n  allergies?: string\n  bloodGroup?: string\n}\n","import { Injectable } from '@nestjs/common'\nimport { PrismaService } from '../prisma.service'\nimport { Prisma } from '@prisma/client'\nimport { AuthenticatedRequest } from '@dental-pro/utils'\n\n@Injectable()\nexport class GetClientsService {\n  constructor(private prisma: PrismaService) {}\n\n  async getClients(req: AuthenticatedRequest): Promise<\n    Prisma.ClientGetPayload<{\n      select: {\n        id: true\n        firstName: true\n        lastName: true\n        email: true\n        phone: true\n      }\n    }>[]\n  > {\n    const clients = await this.prisma.client.findMany({\n      where: {\n        company_id: req.user.company_id, // fetch only clients from the same company\n      },\n      select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n        email: true,\n        phone: true,\n      },\n    })\n\n    return clients\n  }\n}\n","module.exports = require(\"cookie-parser\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common'\nimport { NestFactory } from '@nestjs/core'\nimport { AppModule } from './app/app.module'\nimport cookieParser from 'cookie-parser'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  const globalPrefix = 'api'\n  app.setGlobalPrefix(globalPrefix)\n\n  app.enableCors({\n    origin: 'http://localhost:3000',\n    credentials: true,\n  })\n  app.use(cookieParser())\n\n  const port = process.env.BACKEND_PORT || 3001\n  await app.listen(port)\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  )\n}\n\nbootstrap()\n"],"names":[],"sourceRoot":""}